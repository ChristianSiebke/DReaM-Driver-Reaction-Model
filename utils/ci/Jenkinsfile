/*******************************************************************************
 * Copyright (c) 2021 in-tech GmbH
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *******************************************************************************/

pipeline {
  agent none
  options {
    checkoutToSubdirectory('repo')
  }
  stages {
    stage('Linux and Windows build') {
      parallel {
        stage('Linux') {
          agent {
            kubernetes {
              label 'openpass-agent-pod-' + env.BUILD_NUMBER
              yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: openpass-build
    image: rbiegel/openpass-build:latest
    tty: true
    resources:
      limits:
        memory: "16Gi"
        cpu: "4"
      requests:
        memory: "16Gi"
        cpu: "4"
  - name: jnlp
    volumeMounts:
    - name: volume-known-hosts
      mountPath: /home/jenkins/.ssh
  volumes:
  - name: volume-known-hosts
    configMap:
      name: known-hosts
"""
            }
          }
          stages {
            stage('Linux: Cleanup and prepare dependencies') {
              steps {
                container('openpass-build') {
                  sh 'bash repo/utils/ci/scripts/build_prepare.sh'
                }
              }
            }
            stage('Linux: Build core and run end-to-end tests') {
              steps {
                container('openpass-build') {
                  sh 'bash repo/utils/ci/scripts/build_core_and_e2e.sh'
                }
              }
            }
            stage('Linux: Build and run unit tests') {
              steps {
                container('openpass-build') {
                  sh 'bash repo/utils/ci/scripts/build_unittests.sh'
                }
              }
            }
            stage('Linux: Deploy') {
              when {
                anyOf {
                  tag pattern: "openPASS_.*", comparator: "REGEXP"
                  triggeredBy 'TimerTrigger'
                }
              }
              steps {
                container('jnlp') {
                  sshagent ( ['projects-storage.eclipse.org-bot-ssh']) {
                    sh '''
                      ssh -o BatchMode=yes genie.simopenpass@projects-storage.eclipse.org mkdir -p /home/data/httpd/download.eclipse.org/simopenpass/snapshots
                      [ -f artifacts/openPASS_SIM.tar.gz ] && scp -o BatchMode=yes artifacts/openPASS_SIM.tar.gz "genie.simopenpass@projects-storage.eclipse.org:/home/data/httpd/download.eclipse.org/simopenpass/snapshots/openPASS_SIM_$(date -u +%Y%m%d_%H%M%S).tar.gz"
                    '''
                  }
                }
              }
            }
          }
          post {
            always {
              archiveArtifacts allowEmptyArchive: true, artifacts: 'artifacts/**,dist/Slave/testreport/**', followSymlinks: false
              junit allowEmptyResults: true, testResults: 'build/**/*Tests.xml,repo/sim/tests/endToEndTests/pyOpenPASS/result_*.xml'
            }
          }
        }
        stage('Windows') {
          agent {
            label 'windows'
          }
          environment {
            MSYSTEM = 'MINGW64'
            CHERE_INVOKING = 'yes'
            PYTHON_WINDOWS_EXE = '"C:/Program Files/Python39/python.exe"'
          }
          stages {
            stage('Windows: Cleanup and prepare dependencies') {
              steps {
                bat 'subst W: %WORKSPACE%'
                dir('W:/') {
                  bat 'C:\\msys64\\usr\\bin\\bash -lc repo/utils/ci/scripts/build_prepare.sh'
                }
              }
            }
            stage('Windows: Build core and run end-to-end tests') {
              steps {
                dir('W:/') {
                  bat 'C:\\msys64\\usr\\bin\\bash -lc repo/utils/ci/scripts/build_core_and_e2e.sh'
                }
              }
            }
            stage('Windows: Build and run unit tests') {
              steps {
                dir('W:/') {
                  bat 'C:\\msys64\\usr\\bin\\bash -lc repo/utils/ci/scripts/build_unittests.sh'
                }
              }
            }
            stage('Windows: Deploy') {
              steps {
                sshagent ( ['projects-storage.eclipse.org-bot-ssh']) {
                  bat '''
                    C:\\msys64\\usr\\bin\\bash -lc 'ssh -o BatchMode=yes genie.simopenpass@projects-storage.eclipse.org mkdir -p /home/data/httpd/download.eclipse.org/simopenpass/snapshots'
                    C:\\msys64\\usr\\bin\\bash -lc '[ -f artifacts/openPASS_SIM.zip ] && scp -o BatchMode=yes artifacts/openPASS_SIM.zip "genie.simopenpass@projects-storage.eclipse.org:/home/data/httpd/download.eclipse.org/simopenpass/snapshots/openPASS_SIM_$(date -u +%%Y%%m%%d_%%H%%M%%S).zip"'
                    '''
                }
              }
            }
          }
          post {
            always {
              bat 'subst W: /d'
              archiveArtifacts allowEmptyArchive: true, artifacts: 'artifacts/**,dist/Slave/testreport/**', followSymlinks: false
              junit allowEmptyResults: true, testResults: 'build/**/*Tests.xml,repo/sim/tests/endToEndTests/pyOpenPASS/result_*.xml'
            }
          }
        }
      }
    }
  }
}
